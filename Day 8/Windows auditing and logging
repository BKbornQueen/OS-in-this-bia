Day 8 Windows Logging
FG
https://os.cybbh.io/public/os/latest/011_windows_auditing_&_logging/artifacts_fg.html

sans.org resource learning guides
O'Reilly *** mwr library
	windows internals

PS C:\> Get-LocalUser | select Name,SID 
PS C:\> Get-WmiObject win32_useraccount | select name,sid
C:\windows\system32>wmic UserAccount get name,sid 



The UserAssist registry key tracks the GUI-based programs that were ran by a particular user.
2.1 Location

They are located in HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{GUID}\Count\ * they are encoded in ROT13

The GUID represents a particular file extension.

    CEBFF5CD-ACE2-4F4F-9178-9926F41749EA A list of applications, files, links, and other objects that have been accessed

    F4E57C4B-2036-45F0-A9AB-443BCFE33D9F Lists the Shortcut Links used to start programs

PS C:\> Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count"
  Output shows the Executable files encoded with ROT13. Copy/ Paste the output into a decdoer site like Rot13 or CyberChef


Q: Where can you look to pull all users that have logged on to the computer and have ran executables?

Q: How can we change our command to look at all users Userassist artifacts?

A: From

PS C:\> Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count"

To

PS C:\> Get-ItemProperty "Registry::Hkey_Users\*\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count"

powershell is normally launched from system32 so it is an anomaly for a user to run it from 
their home folder. It is suscpicous activity



Show in Reg Edit:
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings #On 1809 and Newer

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\UserSettings #On 1803 and below

systeminfo

Get-ComputerInfo | select osname,osversion,OsHardwareAbstractionLayer


see student guide for user build

BAM

PS C:\> Get-Item HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\*
Output shows all users BAM artifacts

PS C:\> wmic useraccount  get caption,sid | more
S C:\> Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings\S-1-5-21-1584283910-3275287195-1754958050-1005' 
Get the SID of every local user on the machine
	Insert the SID of andy.dwyer from above. Output shows the BAM artifact from andy.dwyer


Content in the recycle bin is identified by:

    SID - determines which user deleted it

    Timestamp - When it was deleted

    $RXXXXXX - content of deleted files

    $IXXXXXX - original PATH and name

C:\$Recycle.bin (Hidden System Folder)

PS C:\> Get-Childitem 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select FullName
Output shows all of the contents of the Recycle Bin. -Recurse will look at all user’s/SID’s contents
PS C:\> wmic useraccount where 'sid="S-1-5-21-1584283910-3275287195-1754958050-1005"' get name
 	To find Recycle Bin artifacts for a specific user, match the SID, then append it to the previous command:
  Match SID to USER

PS C:\> Get-Content 'C:\$Recycle.Bin\S-1-5-21-1584283910-3275287195-1754958050-1005\$R8QZ1U8.txt' 
 	Reads the contents of a particular file within the Recycle BIN

Prefetch
Prefetch files are created by the windows operating system when an application is run from a specific location for the first time.
find evidence of program execution
allows you to reopen a program quickly- ie loads faster the second time bc the system knows how to get there and where to go



The prefetch files are stored in “\Root\Windows\Prefetch” folder.
* Analysis of prefetch files reveals the evidence of the intial program execution for a user and from a specific location at a specific time.
By default, Windows Server does not have Prefetch enabled.

Prefetch entries record the location of the associated executable and files referenced by that executable. Look for any files executed or referenced from a temp directory as this is typically an outlier.
Use Eric Zimmerman’s PECmd.exe utility to analyze Prefetch data

General Format of a prefetch file: (exename)-(hash-of-path).pf
PS C:\> Get-Childitem -Path 'C:\Windows\Prefetch' -ErrorAction Continue | select -First 8 


jumplists frequently visited items
PS C:\> Get-Childitem -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction Continue | select FullName, LastAccessTime



recently used programs
PS C:\> Get-Childitem -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction Continue | select FullName, LastAccessTime

Query the Hex Value Stored in the Key
PS C:\> Get-Item 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.*'
With the * we can see the types of files/ information that was recently viewed.


PS C:\> Get-Winevent -FilterHashtable @{logname='Security';id='4624'} | ft -Wrap 
gives logged on users
google event id numbers for specific thing

2.1 Location

They are located in HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{GUID}\Count\ * they are encoded in ROT13

The GUID represents a particular file extension.

    CEBFF5CD-ACE2-4F4F-9178-9926F41749EA A list of applications, files, links, and other objects that have been accessed

    F4E57C4B-2036-45F0-A9AB-443BCFE33D9F Lists the Shortcut Links used to start programs



monitoring
auditing
\System32\WinEvt\Logs\System.evtx
security
NT AUTHORITY\SYSTEM
SACL
HKLM\Security\Policy\PolAdtEv
PsLogList ////section8.2
strings
HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs
1803 ***ver //// (<#>) based on the build number look on the windows chart (google or FG) for the 4 digit build number
PS C:\> Get-Childitem -Recurse C:\<AbsolutePathOfFile> -ErrorAction Continue | select FullName, LastAccessTime
	*** /etc/hosts absolute file path is C:\Windows\System32\Drivers\etc\hosts
C:\Windows\Prefetch
$R
$I
CEBFF5CD *** use sans cheat sheet or google it *** HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{GUID}\Count\
ROT13
security
system
-wrap *** format-table -wrap ***
	PS C:\windows\system32> net use * http://live.sysinternals.com
	PS C:\> Z:\strings.exe 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\History' -accepteula 
https://www.exploit-db.com/
Flag, Found A.
	*** PS C:\> Get-Item 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.*'
	*** PS C:\> Get-Item "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" | select -Expand property | ForEach-Object { [System.Text.Encoding]::Default.GetString((Get-ItemProperty -Path "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" -Name $_).$_)}  
	*** cd to location of file then cat to screen  *** analyze list of words ***
/
BAD_INTENTIONS.EXE-8F2806FC.pf  *** cd inot C:\Windows\Prefetch *** then dir and visual analyze the data
02/23/2022
$R39JR3B,DontTrashMeyo
	*** Get-Childitem 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select FullName
	*** Get-content 'C:\$RECYCLE.BIN\S-1-5-21-2881336348-3190591231-4063445930-1003\$R*.txt'
	*** Get-content 'C:\$RECYCLE.BIN\S-1-5-21-2881336348-3190591231-4063445930-1003\$R39JR3B.txt'
_____________________
Volatility
https://os.cybbh.io/public/os/latest/013_memory_analysis/mem_fg.html

find imagepath
	.\volatility_2.6_win64_standalone.exe -f ".\cridex.vmem" imageinfo
then input the command that varies

Volatility syntax to list available plugins for a given profile
PS C:\Users\andy.dwyer\Desktop\Memory Analysis> .\volatility_2.6_win64_standalone.exe -f ".\cridex.vmem" --profile=WinXPSP2x86 -h 
	help (-h) syntax to list plugins available for the profile WinXPSP2x86 (--profile=WinXPSP2x86)
.\volatility_2.6_win64_standalone.exe -f ".\<virusname>.vmem" --profile=WinXPSP2x86 <evaluationCommand>
Example
PS C:\Users\andy.dwyer\Desktop\Memory Analysis> .\volatility_2.6_win64_standalone.exe -f ".\cridex.vmem" --profile=WinXPSP2x86 connections 
5. Volatility Methodology and Beyond

The SANS Institute recommends the following commands when using Volatility.

    Identify Rogue Processes: pslist vs. psscan; output results to a dot file to have a nice visual representation of parent/child process relationships

        Process validity - look for things that are off (misspellings, high PIDs, multiples that shouldn’t be, etc.)

    DLLs and Handles: dlllist, dlldump

    Network Artifacts: connections

    Hunt for Code Injection: malfind

    Check for rootkit: psscan, devicetree

    Dump suspicious processes and drivers: dlldump, procdump, memdump, filescan, svcscan, driverirp

Commands to use
5.1 Registry Analysis

It is possible to read the registry from the box but a bit more involved. The list below shows plugins and options one may use within Volatility to achieve this.

    hivelist - Shows addresses of hives and filesystem locations

    printkey

        use -o with the virtual offset to show subkeys

        use -K with the location of the registry key you want on the filesystem (note double quotes with this method) "path\to\key"

    hivedump - use -o with virtual offset to recursively list all subkeys

    hashdump - may or may not work, depending

    dumpregistry - Go nuclear. Dumps the whole registry to disk (requires --dump-dir)

Try other plugins to investigate other artifacts mentioned in earlier lectures. Run help in Volatility to see what plugins you have available for use.

File Analysis (using filehash) with VirusTotal
Search the hash not the name to remain stealth

    Copy filehash

    Go to VirusTotal

    Click on Search

    Paste filehash

***If you need to search an infected file you can use notepad++ with regex or strings.exe
May need to reference FG to download notepad++
------------------------
Active Directory
https://os.cybbh.io/public/os/latest/014_windows_active_directory_enumeration/active_fg.html
persistence
windows event logs
application logs
event logs
windows logs
enabled guest account or other account the manipulate permissions and groups to increase power

___________________________________________________
#Getting a User's SID
 #PowerShell:
get-wmiobject win32_useraccount | select name,sid
Get-LocalUser | select Name,SID
 #Command Prompt:
wmic useraccount get name,sid 

#USERASSIST
 #CEBFF5CD: Executable File Execution
Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count"
 #F4E57C4B: Shortcut File Execution
Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{F4E57C4B-2036-45F0-A9AB-443BCFE33D9F}\Count"

#BAM
#Every User on the System
Get-Item HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\*
#Single User on the System
Get-Item HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\<SID>

#RECYCLEBIN
#Find the Contents of the Recycle Bin
Get-Childitem 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select FullName
   
#PREFETCH
Get-Childitem -Path 'C:\Windows\Prefetch' -ErrorAction Continue | select -First 50
   
#JUMP LISTS
#Programs/Items that were recently used
Get-Childitem -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction silentlyContinue | select FullName, LastAccessTime
Get-Childitem -Recurse C:\Users\andy.dwyer\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction SilentlyContinue | select CreationTime,FullName |ft -wrap
Get-Childitem -Recurse C:\Users\andy.dwyer\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction SilentlyContinue | select LastAccessTime,FullName |ft -wrap
#or
Get-Childitem -Recurse $env:USERPROFILE\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction SilentlyContinue | select LastAccessTime,FullName | ft -wrap

#RECENT FILES
Get-childItem 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt'
Get-childItem 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.*'
#Converting a Single Value from Hex to Unicode
[System.Text.Encoding]::Unicode.GetString((gp "REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt")."1")
#Convert All Files
Get-Item "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" | select -Expand property | ForEach-Object {
    [System.Text.Encoding]::Default.GetString((Get-ItemProperty -Path "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" -Name $_).$_)
}

#BROWSER ARTIFACTS
# Frequency
strings.exe 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\History' -accepteula

# Most Visited
strings.exe 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Top Sites'

# User Names
strings.exe  'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Login Data'
strings.exe  'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Login Data' | findstr -i "https*"

#Find FQDNs in Sqlite Text files
$History = (Get-Content 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\History') -replace "[^a-zA-Z0-9\.\:\/]",""

$History | Select-String -Pattern "(https|http):\/\/[a-zA-Z_0-9]+\.\w+[\.]?\w+[\.]?\w+" -AllMatches|foreach {$_.Matches.Groups[0].Value}| ft

#AUDIT Policies
#View All Audit Options
auditpol /get /category:*
#View Subcategory
auditpol /get /category:"Object Access"
#Sets it
auditpol /set /subcategory:"File System"
#Clears It
auditpol /set /subcategory:"File System" /success:disable

#=====Command Prompt=====
#EVENT LOGS
#Show all logs
wevtutil el
#Get security log info
wevtutil gli security
#Get last 3 events from security log and view in human readable format.
wevtutil qe security /c:3 /f:text    

#Last 10 entries in System Log
Get-EventLog -LogName System -Newest 10
Get-EventLog -LogName System -Newest 10 | Format-Table -wrap
Get-EventLog -LogName System | Format-Table -wrap

#Search the event logs and show the entire message
Get-Eventlog -LogName Security | ft -wrap
#Search for a String
Get-Eventlog -LogName Security | ft -wrap | findstr /i $tR1nG
Get-Eventlog -LogName Security | ft -wrap | findstr /i "An attempt was made to access an object."

#Finding Log Type to Query
Get-WinEvent -Listlog *

#Checking If a User Logged on
Get-Winevent -FilterHashtable @{logname='Security';id='4624'} | ft -Wrap
Get-Winevent -FilterHashtable @{logname='Security';id='4624'} | ft -Wrap | findstr /i "generated"

#Checking Powershell Operational Logs
Get-WinEvent Microsoft-Windows-PowerShell/Operational |Where-Object {$_.Message -ilike "*Out-Default*"} | Format-List

Get-WinEvent Microsoft-Windows-PowerShell/Operational |Where-Object {$_.Message -ilike "*Pipeline ID = 4103"} | Format-List




