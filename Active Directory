Active Directory
persistence
  groups
  users
  permissions
volatility executeable

Searching for Multiple Users/List of Users
Get-ADUser -Filter *

#Searching for a Single User
Get-ADUser andy.dwyer

#Searching for Multiple Users + Extended Properties
Get-AdUser -Filter * -Properties *
Get-ADUser andy.dwyer -Properties *

#Breaking Down -Filter and -Properties
Get-ADUser -Filter {Name -like '*joh*'}
Get-ADUser -Filter {Name -like '*admin*'}

#Filter is what you can use to apply your conditions in. 
Get-ADUser -Filter {Name -like '*odonnell'}

#Filtering for Different Fields, by Default you will get 10 fields : Example Description
Get-ADUser -Filter *

#Properties is what you can use to view the data.
Get-ADUser -Filter {Officephone -like '*'}
Get-ADUser -Filter {Officephone -like '*'} -Properties *

#Full output for Specific User
Get-ADUser -Filter {Name -like '*odonnell'} -Properties *

#This Filter succeeded, however, since you did not apply the 
#-Properties switch, it will not display the results
Get-ADUser -Filter {Description -like '*'}

#With the -Properties switch; However, this will provide you all the fields
Get-ADUser -Filter {Description -like '*'} -Properties * 

#Adding on the -Properties switch and specifying an additional field; we get 11 fields
Get-ADUser -Filter {Description -like '*'} -Properties Description

#Because Get-ADUser by default provides us with 10 fields, we will need to pipe our output to Select-Object to filter
#which fields we want/need
Get-ADUser -Filter {Description -like '*'} -Properties Description | Select-Object Name,SID,Description
Get-ADUser -Filter {Description -like '*'} -Properties Description | Select-Object Name,SID,Description | Format-List

g
#FIND Disabled Users
Get-ADUser -Filter {Enabled -eq "false"} -Properties name,enabled

#Enable User
Enable-ADAccount -Identity guest
#Set Password
Set-ADAccountPassword -Identity guest
#or
Set-AdAccountPassword -Identity guest -NewPassword (ConvertTo-SecureString -AsPlaintext -String "PassWord12345!!" -Force)
#Add to Domain Group
Add-ADGroupMember -Identity "Domain Admins" -members guest

#CREATE a New User
#Get sample of naming convention
Get-ADUser -Filter * | select distinguishedname,name

#Create User
New-ADUser -Name "Bad.Guy" -PasswordNotRequired 1 -path "OU=3RD PLT,OU=ACO,OU=3RDBN,OU=WARRIORS,DC=army,DC=warriors"

#Set Password
Set-ADAccountPassword -Identity "Bad.Guy"

# OR Create User & Set Password
New-ADUser -Name "Bad.Guy" -AccountPassword (ConvertTo-SecureString -AsPlaintext -String "PassWord12345!!" -Force) -path "OU=3RD PLT,OU=CCO,OU=3RDBN,OU=WARRIORS,DC=army,DC=warriors"

#Enable User
Enable-ADAccount -Identity "Bad.Guy"

#Add to Admin Group
Add-ADGroupMember -Identity "Domain Admins" -members "Bad.Guy" 

Remove-ADUser -Identity "Bad.Guy"
Remove-ADGroupMember -Identity "Domain Admins" -Members guest
Disable-AdAccount -Identity Guest
_________________
==========Registry==========

#Get-ChildItem - Reads sub keys from the input value
Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion

#Get-Item - Reads the value of the inputted object
Get-Item HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run#New-Item - Creates a new sub key associated within a hive

#Creates a new sub key in Trusted Documents for document.doc 
#Be sure to use '-force' 
New-Item "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords"
New-item "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords" -Force

#New-ItemProperty - Creates a new value associated with a sub key
New-ItemProperty "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords" -Name "%USERPROFILE%Downloads/test-document.doc" -PropertyType Binary -Value ([byte[]](0x30,0x31,0xFF))New-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run -Name Test -PropertyType String -Value C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe#Rename-ItemProperty - Modifies a value associated with a sub key

#Rename-ItemProperty - Modifies a value associated with a sub key
Rename-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\WIndows\CurrentVersion\Run -Name SecurityHealth -NewName Test

#Remove-ItemProperty - Removes a value associated with a sub key
Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords" -Name "%USERPROFILE%Downloads/test-document.doc"

#Set-ItemProperty - Change the value of a sub key
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\WIndows\CurrentVersion\Run -Name Test -Value Bacon.exe#PSDRIVES

#Use PSDrive to create a Temporary connection to navigate the Registry
New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS

#PSDrive to a Romote Box Registry
New-PSDrive -Name "SysInt" -PSProvider FileSystem -Root "\\live.sysinternals.com\Tools"

==========ADS==========

# Create a file 'reminder.txt' with content 'Always try your best'
echo Always try your best > reminder.txt

# Verify file and content exists
dir reminder.txt
type reminder.txt

# Add ADS content 'social security numbers' to reminder.txt
echo social security numbers > reminder.txt:secret:info

# Verify file and contents again - notice that the ADS 'social security numbers' does not show up.
dir reminder.txt
type reminder.txt

# If we are aware of an ADS...we can list its content and show file related information.
more < reminder.txt:secret.info
notepad reminder.txt:secret.info
dir /R reminder.txt

# Some applications/commands are still unable to show ADS content even when you know it is there.
type reminder.txt:secret.info

#-- Altnerate Data Streams on a Directory --#

# Create a directory 'kids' with ADS content 'top-secret information'
mkdir kids
echo top-secret information > kids:hidden.txt

# Verify ADS content
dir /R
more < kids:hidden.txt

#---- Creating and Viewing Alternate Data Streams via PowerShell ----#

# Create a file 'reminder.txt' with content 'Always try your best'
echo "Always do your best" > reminder.txt

# Verify file and content exists
Get-Childitem reminder.txt
Get-Content reminder.txt

# Add ADS content 'social security numbers' to reminder.txt
Set-Content reminder.txt -Value "social security numbers" -Stream secret.info

# Verify file and content exists - we still don't see ADS content
Get-Childitem reminder.txt
Get-Content reminder.txt

# Show file streams and list ADS content
Get-Item reminder.txt -Stream *
Get-content reminder.txt -Stream secret.info

# Create a file 'test.txt' with content 'Nothing to see here!'
Write-Output "Nothing to see here!" > test.txt

# Add ADS content sequentially
Add-Content -Path .\test.txt -Value 'Dim oShell' -Stream 'secret.vbs'
Add-Content -Path .\test.txt -Value 'Set oShell = Wscript.CreateObject ("Wscript.Shell")' -Stream 'secret.vbs'
Add-Content -Path .\test.txt -Value 'oShell.run "cmd /k CD C:\Program Files & ping 8.8.8.8" ,1 , true ' -Stream 'secret.vbs'

# Verify file and contents - Nothing has changed visibly
Get-Content .\test.txt
Get-Content .\test.txt -Stream secret.vbs

#---- Execute Malicious Alternate Data Stream ----#

# Execute Script contained in ADS content
wscript .\test.txt:secret.vbs

#-- From CMD.exe --#

# Run 'Certutil' to check the hash of the file.
Certutil -hashfile test.txt MD5

# Open ADS content in notepad and make changes.
notepad test.txt:secret.vbs
##add any text to the file and save it##
MORE < test.txt:secret.vbs

# Rerun Certutil - notice the MD5 hash doesn't change.
Certutil -hashfile test.txt MD5
_________________
21-1004336348-1177238915-682003330
get-adgroup
get-aduser -filter*
Search-ADAccount

