https://os.cybbh.io/public/os/latest/004_windows_registry/reg_fg.html#_1_windows_registry_introduction
Windows Registry
    Heiracrchial Datatbase of windows system configuration
Hive Keys
  

There are five Registry Hives
    HKEY_LOCAL_MACHINE
      HKEY_CURRENT_CONFIG
              Start i[
      HKEY_CLASSES_ROOT
              alias pointer/symbolic link to dictate how software will be classified(extensions)
    HKEY_USERS
      HKEY_CURRENT_USERS
      

SID
  users begin at 1000
Priviledged Users
    500 Admin

Editing the registry
  Regedit.exe
      Using Regedit.exe to query the Registry
	Click on the search bar and type in regedit.exe
	If prompted by UAC, click yes
	Click on the drop down for HKEY_CURRENT_USER
	Click the drop down for Software
	Click the drop down for Microsoft
	Click the drop down for Windows
	Click the drop down for CurrentVersion
	Click the drop down for Run
	We have successfully queried a key using regedit.exe
Regedit.exe
  Computer\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

From CLI (cmd.exe run as administrator or sudo to elevated priviledges)

reg_query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run


Reg.exe help

reg /?                    #Displays help for all of the reg.exe commands
reg query /?              #Displays help for the `reg query`
reg add /?                #Displays help for `reg add`
reg delete /?             #Displays help for `reg delete`

Reg query - Reads keys from specific registry locations
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run

Reg add - Adds keys to specific registry locations
reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme /t REG_SZ /d C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe

    The /v stands for Value; In this case the name of this Key Value.

    The /t stands for Type; Types can be any of the Data Types that we went over earlier.

    The /d stands for Data; Is what is the actual Data or in this case a command to open a file every time the system is ran.

Reg delete - Deletes Keys
reg delete HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v testme

Powershell
Registry Manipulation with PowerShell


    Certain Root Hives are loaded automatically into PSDrives (HKLM: and HKCU:); 
    navigation of the registry is very similar to folder⇒file

Minimum commands to know

    Query
        Get-ChildItem cmdlet gets the items in one or more specified locations.
		Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run 
			The returns nothing because it is listing the sub keys of \Run.
			Run has no sub keys, only values.
		Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\
			Returns sub keys of \CurrentVersion
        Get-ItemProperty cmdlet gets the items in one or more specified locations.
        Get-Item cmdlet gets the item at the specified location. 
		It doesn’t get the contents of the item at the location 
		unless you use a wildcard character (*) to request all the contents of the item.

    Modify
        Set-ItemProperty cmdlet changes the value of the property of the specified item. 
	example, changing setting to :true or :false.
        Remove-ItemProperty cmdlet to delete registry values and the data that they store.

    Create
        New-Item cmdlet creates a new item and sets its value. In the registry:
	New-Item creates registry keys and entries.
        New-Itemproperty cmdlet creates a new property for a specified item and sets its value. 
	Typically, this cmdlet is used to create new registry values, 
	because registry values are properties of a registry key item.

PS Drives
	allow interaction with the registry
	Get-PSDrive
		The PSDrive must exist for the item in order to use PSDrive
		ie no PSDrive listed for HKU then PSDrive for HKU will not be available

New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS
	if there is an error or typo  it will add the dirve anyway
		however it will be an empty or dead link
		an error will be produced if you attempt to call or query the drive
	symbolic link a mapping to a drive
		allows interaction as if it is apart of the filesystem
	the drive must exist
move to a PSDrive
dir <drivename>:
cd <drivename>:



ADS
cannot be disabled
does not alter the md5sum
used as method hide data
Reveal ADS
	dir /R

Powershell
Get-FileHash -Algorithm MD5 .\<filename.extension>

CMD.exe
MD5 


==========Registry==========

#Get-ChildItem - Reads sub keys from the input value
Get-ChildItem HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion

#Get-Item - Reads the value of the inputted object
Get-Item HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run#New-Item - Creates a new sub key associated within a hive

#Creates a new sub key in Trusted Documents for document.doc 
#Be sure to use '-force' 
New-Item "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords"
New-item "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords" -Force

#New-ItemProperty - Creates a new value associated with a sub key
New-ItemProperty "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords" -Name "%USERPROFILE%Downloads/test-document.doc" -PropertyType Binary -Value ([byte[]](0x30,0x31,0xFF))New-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run -Name Test -PropertyType String -Value C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe#Rename-ItemProperty - Modifies a value associated with a sub key

#Rename-ItemProperty - Modifies a value associated with a sub key
Rename-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\WIndows\CurrentVersion\Run -Name SecurityHealth -NewName Test

#Remove-ItemProperty - Removes a value associated with a sub key
Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Office\14.0\Security\Trusted Documents\TrustRecords" -Name "%USERPROFILE%Downloads/test-document.doc"

#Set-ItemProperty - Change the value of a sub key
Set-ItemProperty HKLM:\SOFTWARE\Microsoft\WIndows\CurrentVersion\Run -Name Test -Value Bacon.exe#PSDRIVES

#Use PSDrive to create a Temporary connection to navigate the Registry
New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS

#PSDrive to a Romote Box Registry
New-PSDrive -Name "SysInt" -PSProvider FileSystem -Root "\\live.sysinternals.com\Tools"

==========ADS==========

# Create a file 'reminder.txt' with content 'Always try your best'
echo Always try your best > reminder.txt

# Verify file and content exists
dir reminder.txt
type reminder.txt

# Add ADS content 'social security numbers' to reminder.txt
echo social security numbers > reminder.txt:secret:info

# Verify file and contents again - notice that the ADS 'social security numbers' does not show up.
dir reminder.txt
type reminder.txt

# If we are aware of an ADS...we can list its content and show file related information.
more < reminder.txt:secret.info
notepad reminder.txt:secret.info
dir /R reminder.txt

# Some applications/commands are still unable to show ADS content even when you know it is there.
type reminder.txt:secret.info

#-- Altnerate Data Streams on a Directory --#

# Create a directory 'kids' with ADS content 'top-secret information'
mkdir kids
echo top-secret information > kids:hidden.txt

# Verify ADS content
dir /R
more < kids:hidden.txt

#---- Creating and Viewing Alternate Data Streams via PowerShell ----#

# Create a file 'reminder.txt' with content 'Always try your best'
echo "Always do your best" > reminder.txt

# Verify file and content exists
Get-Childitem reminder.txt
Get-Content reminder.txt

# Add ADS content 'social security numbers' to reminder.txt
Set-Content reminder.txt -Value "social security numbers" -Stream secret.info

# Verify file and content exists - we still don't see ADS content
Get-Childitem reminder.txt
Get-Content reminder.txt

# Show file streams and list ADS content
Get-Item reminder.txt -Stream *
Get-content reminder.txt -Stream secret.info

# Create a file 'test.txt' with content 'Nothing to see here!'
Write-Output "Nothing to see here!" > test.txt

# Add ADS content sequentially
Add-Content -Path .\test.txt -Value 'Dim oShell' -Stream 'secret.vbs'
Add-Content -Path .\test.txt -Value 'Set oShell = Wscript.CreateObject ("Wscript.Shell")' -Stream 'secret.vbs'
Add-Content -Path .\test.txt -Value 'oShell.run "cmd /k CD C:\Program Files & ping 8.8.8.8" ,1 , true ' -Stream 'secret.vbs'

# Verify file and contents - Nothing has changed visibly
Get-Content .\test.txt
Get-Content .\test.txt -Stream secret.vbs

#---- Execute Malicious Alternate Data Stream ----#

# Execute Script contained in ADS content
wscript .\test.txt:secret.vbs

#-- From CMD.exe --#

# Run 'Certutil' to check the hash of the file.
Certutil -hashfile test.txt MD5

# Open ADS content in notepad and make changes.
notepad test.txt:secret.vbs
##add any text to the file and save it##
MORE < test.txt:secret.vbs

# Rerun Certutil - notice the MD5 hash doesn't change.
Certutil -hashfile test.txt MD5


///////////////////////////////
Here is my personal Registry demo:

reg add "hklm\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe" /v "Debugger" /t reg_sz /d "c:\Windows\System32\cmd.exe"

Explain net use command

Autoruns.exe

Jump to Entry

Regedit export reg file

new-item "hklm:\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe"

New-ItemProperty -path "hklm:\software\microsoft\windows nt\currentversion\image File Execution Options\sethc.exe" -Name Debugger -Type String -Value C:\Windows\System32\cmd.exe

new-psdrive -Name HKU -PSProvider Registry -Root HKEY_USER

Observe Error

gci HKU:

Observe error

remove-psdrive HKU

new-psdrive -Name HKU -PSProvider Registry -Root HKEY_USERS
Here is Jordan Salyer's Reg Walkthrough

Windows Registry


What is it:
Hierarchical database of critical system configurations.

Registry is the configuration and control mechanism for the Windows Operating system.

Contains system-wide and per-user settings.


Contains Keys and Values
   Handle of Registry Key
   Key contain Sub-Keys and a collections of Property/Value pairs
   Much like the Folder/File relationship
   Values stores data, on/off, and, file paths

Data types
REG_SZ . String
REG_BINARY . Binary data
REG_DWORD . 32 bit integer. Max 7FFF,FFFF or 2,147,483,647.
REG_LINK . Symbolic links- A link that will take you to the actual location of the data
REG_MULTI_SZ . Multi-String values- Multiple strings that are terminated with "\0". Example: "abc\0def\0"
REG_QWORD . 64 bit integer. Max 7FFF,FFFF,FFFF,FFFF or 9,223,372,036,854,775,807.


HKLM: Local Machine
   System related information, SAM, Critical boot/kernel functions, 3rd party software, BCD (Boot Configuration Database), current physical profiles



DEMO

   Reg query HKLM
   Gci HKLM:\
   Why can we do this?
   Powershell interpretes them as datastores
   Get-PSProvider

   HKLM and HKCU are mapped by default


HKU: Users HKCU (symbolic link to HKU\<sid>) Holds all the users settings and file
   DEMO
   Reg HKU
   SIDs and users…
   How do we determine SIDs?
Get-Ciminstance Win32_Useraccount <look for Relative ID>
   Gci HKU:\
   Uh oh what happened?
   Get-PsDrive (You can see we do not have HKU mapped, so we will have to map it.)
   New-PsDrive -Name HKU -PSProvider Registry -Root HKEY_USERS
   Gci HKU:\<sid>
Gci -attributes hidden c:\users\


HKCR - Classes Root: Shell COM applications, Contains file extension associations, provides backwards comp,
Merged - HKLM\Software\Classes and HKCU\Software\Classes
HKCC - Current Config: Only describes Current hardware configuration different from standard… built on boot alias for HKEY_LOCAL_MACHINE\System\CurrentControlSet\Hardware Profiles\Current.



Do the hives reside on disk?

HKEY_LOCAL_MACHINE \SYSTEM : \system32\config\system
HKEY_LOCAL_MACHINE \SAM : \system32\config\sam
HKEY_LOCAL_MACHINE \SECURITY : \system32\config\security
HKEY_LOCAL_MACHINE \SOFTWARE : \system32\config\software
HKEY_USERS \UserProfile :  \winnt\profiles\username
HKEY_USERS.DEFAULT : \system32\config\default





When do changes take place

Changes to Windows System settings require a reboot
User setting require a login
Windows Policy Setting don’t require reboot
Application require a restart
But it all varies and needs to be tested




Show regedit

Which commands or executables do we have to view and alter the registry?

Regedit
GUI
Import and Export hive files
Remote yes, needs remote registry turned on

Reg.exe
CLI
Is it built into CMD or standalone? (Stand alone)
Resides System32
Same remote capability
Different commands (query, add, delete)

Powershell

CLI
Remote enabled by WinRM and firewall exception
Remember PowerShell loads as data stores

Open Regedit

New-item HKCU/SOFTWARE/MICROSOFT/WINDOWS/CURRENTVERSION/POLICIES/System

New-itemproperty -path HKCU/SOFTWARE/MICROSOFT/WINDOWS/CURRENTVERSION/POLICIES/System -Name DisableTaskMgr -Value 1 -PropertyType DWORD

Set-Itemproperty -path HKCU/SOFTWARE/MICROSOFT/WINDOWS/CURRENTVERSION/POLICIES/System -Name DisableTaskMgr -value 0

Remove-Item -path  HKCU/SOFTWARE/MICROSOFT/WINDOWS/CURRENTVERSION/POLICIES/System


To open regedit as system. (This allows you to see the SAM database)

You can demo opening a regedit as Administrator and looking at HKLM\SAM (you should not see anything under SAM)


Open regedit with psexec ( Browse to HKLM\SAM, you should now see items under SAM)

Psexec -s -i regedit

////////////////////////////
#Powershell 

# USE PowerShell Integrated Scripting Environment (ISE) 
###################################
#1. Basic Powershell Concepts

###################################
#1.1 Commands and Arguments
Verb-Nown
get-process (singular)
NOT 
get-processes

cd C:\Users\student\Desktop
Get-ChildItem
New-Item C:\Users\student\Desktop\content.txt
Set-Content C:\Users\student\Desktop\content.txt "This is the way"
# Display the contents of the file
Get-Content -Path "C:\Users\student\Desktop\content.txt"     
                      
# Display current Variables
Get-Variable                                                                          
# List the PowerShell verbs
Get-Verb                                                                             
# Use the Method Start to open notepad.exe
Start-Process Notepad.exe  
# Use the Method Stop to close notepad.exe                    
Stop-Process notepad

# List the PowerShell cmdlets
Get-Command 

###################################
#1.6 Pipelining
#Objects in Powershell are passed along in pipes (|) based off their input cmdlets

# Display Properties and Methods of Get-LocalUser cmdlet
Get-LocalUser | Get-Member      

# Properties = what we know
# Methods    = what we can do

# previous example with creating content.txt
Get-ChildItem C:\Users\student\Desktop\content.txt | Get-Member

#1.3 Powershell Object Properties

# Return the single property of 'name' of every process                    
(get-process).name
(Get-Process).Name                             

# Display the Get-Process Properties of 'Name, ID, Path' for every process                           
Get-Process | Select-Object Name, ID, path     

                                                                   
# Get cmdlets and display them in order
Get-Command -Type Cmdlet | Sort-Object -Property Noun | Format-Table    

# Check out how to format
Get-Help Format-Table
Get-Help Format-List

# Get commands in a module
Get-Command -Module Microsoft.PowerShell.Security, Microsoft.PowerShell.Utility -GroupBy Noun    
###################################
###################################
#1.2 Powershell Help

# Display help about a PowerShell cmdlet
Get-Help <cmdlet>  
                                               
# Display help for Get-Process cmdlet
Get-Help get-process  
                                            
# Open a web browser and display help for the Get-Process cmdlet on the Microsoft website
Get-Help get-process -online                                      
man get-process
man get-process -detailed
man get-process -full

# Display history of commands in current window
Get-History 
# Display present working directory 
Get-Location
     # similar to PWD on Linux, gl is the alias         
get-alias gl
get-alias dir
get-alias ls

###################################


#1.4 Using the Methods of Objects

# Display all objects with Method in their name from the results from Get-Member of the Get-Process cmdlet
Get-Process | Get-Member | Where-Object {$_.Membertype -match "Method"}  
# Open an instance of calculator     
Start-Process calc 
# Stop a named process using a method                             
(Get-Process calculator*).kill()                
# Same as above
Stop-Process -name calculator*                  
##################################
#1.5 Pipelined Variables

# List all the processes with a PID lower than 1000
Get-Process | Select-Object Name, ID, path | Where-object {$_.ID -lt '1000'}            
# Count the list of all the processes with a PID lower than 1000
(Get-Process | Select-Object Name, ID, path | Where-object {$_.ID -lt '1000'}).count    
#####################################
#####################################
#2.7 PowerShell Comparison Operators

get-help about_comparison_operators
# Take the output from Get-Service and looks for Status property of Stopped and list those Services
Get-Service | Where-Object {$_.Status -eq "Stopped"}            
# Same as above
Get-Service | where Status -eq "Stopped"   
# Lists Processes that have Greater Than 1000 Handles                     
Get-Process | Where-Object -Property Handles -GE -Value 1000    
# Same as above
Get-Process | where Handles -GE 1000                            
####################################
####################################
#2.8 Commenting in PowerShell
 
Get-Process | select -first 10 # This is how to do head in PS

<# I could
also write a book
IF I really wanted
to #>

####################################
#1.7 CIM Classes

#Common Information Model 
#Think of CIM class as place holder and CIM instance as an actual event.
# WMI is deprecated 

# List all CIM Classes
Get-Cimclass *                                                                  
# List the antispywareproduct class from the root/security instance
Get-CimInstance –Namespace root\securitycenter2 –ClassName antispywareproduct 
# Show properties and methods for this Instance  
Get-CimInstance -ClassName Win32_LogicalDisk -Filter “DriveType=3” | gm    
# Use the Windows Management Instrumentation method     
Get-WmiObject -Class Win32_LogicalDisk -Filter “DriveType=3”                    

# Query Win32_Bios
Get-CimInstance -class Win32_BIOS                      
# same output but deprecated command
Get-WmiObject -Class Win32_BIOS                        
#######################################
#######################################
#2.3 PowerShell Variables
# unit of memory to store all types of values

# Display names without the preceding <$>
Get-Variable                
      
# Create the MyVariable with 1,2,3
$MyVariable = 1, 2, 3, "dingo"    

# Delete the value of a Variable
Clear-Variable -Name MyVariable   

# Delete the Variable
Remove-Variable -Name MyVariable  

#Variable with command results
# Create a Variable with the results of Get-Process
$Processes = Get-Process  
 
# Create a combined Date/Time variable from the results of Get-Date       
$Today = (Get-Date).DateTime      

#To view a variable’s object type, use Get-Member
$PSHome | Get-Member              # Displays System.String with it's objects and properties
$A=12                             # Creating A with an integer
$A | Get-Member                   # Displays System.Int32

#2.3.2 Automatic Variables
Get-Help about_automatic_variables

#2.1 PowerShell Loops

Get-Help about_For
Get-Help about_Foreach
Get-Help about_While
Get-Help about_Do

#2.1.2 For Loop
# for this (as long as it's true)...

 #Initial placeholder 
    # Example:  $num = 1
 #Condition Placeholder
    #Example: $num -lt 10
 #Statement List Placeholder
    #Example: "I count $num "
 #Repeat Placeholder
    #Example: $num++

for ($num = 1 ; $num -le 10 ; $num++){"I count $num"}
##################################
$array = ("apples", "dingos", "bananana", "ananas")
for($i = 0; $i -lt $array.length; $i++){ $array[$i] }
##################################
##################################
#2.1.3 Foreach Loop  
# (iterating) a series of values in a collection of items.
##################################
$letteroftheDayArray = "a","b","c","d"
foreach ($letter in $letteroftheDayArray)
{
  Write-Host $letter
}
##################################

foreach ($file in Get-ChildItem)
{
  Write-Host $file, "|", $file.CreationTime
}
#2.1.4 While Loop
$val=0
while($val -ne 3)
{
    $val++
    Write-Host $val
}
##################################
##################################
#2.1.1 Do Loop
# two primary types -- while and until
##################################
#---while---
$x = 1,2,78,0

do { $count++; $a++ } while ($x[$a] -ne 0)
$count
#---until--- (always runs at least once)
$x = 1,2,78,0
do { $count++; $a++; } until ($x[$a] -eq 0)
$count
##################################
##################################
#2.1.5 Loops Combined
for ($i = 1; $i -le 5; $i++) { Write-Host $i }

foreach ($i in Get-Alias) { Write-Host $i.name }
$i = 14

while ($i -gt 7) {
     Write-Host $i
     $i-=1
}
$i = 1
do
{
     Write-Host $i
     $i+=1
} while ($i -lt 7)
##################################
##################################
#2.2 PowerShell Conditions  (if--elseif--else)
if ($a -gt 2) {
    Write-Host "The value $a is greater than 2."
}
elseif ($a -eq 2) {
    Write-Host "The value $a is equal to 2."
}
else {
    Write-Host ("The value $a is less than 2 or" +
        " was not created or initialized..."+
        "or you didn't count for something")
}
##################################
##################################
#2.4 PowerShell Arrays 
$A = 22,5,10,8,12,9,80
echo $A
##################################
$b= 1..9
echo $b
##################################
foreach ($element in $b) {
  $element
}
##################################
# Print every other
for ($i = 0; $i -le ($b.length - 1); $i += 2) {
  $b[$i]
}
##################################
# Print until a condition is met
$i=0
while($i -lt 4) {
  $b[$i];
  $i++
}
##################################
##################################
#2.1.6 Error Messaging
# Display errors in red
Remove-Item does_not_exist.txt                                         
# Hide any errors
Remove-Item does_not_exist.txt -ErrorAction SilentlyContinue           

# Create a new file called 'it_exists.txt'
New-Item -Type File it_exists.txt   
# Return a message notifying that it was deleted                                   
Remove-Item it_exists.txt -Verbose                                     
##################################
##################################
#2.5 PowerShell Functions
Get-Help about_Functions                                      # Displays the help about Functions
Get-Help about_Functions_Advanced                             # Displays some more in-depth help about Functions
Function Do-Stuff { Get-Date; Get-Process; Get-Service }      # Creates a Function with 'Get-Date, Get-Process, Get-Service' inside of it
Do-Stuff |where Status -eq "Running"                          # Runs the Function
##################################
##################################
#2.6 PowerShell Execution Policy
# Security concern, scripts can contain a host of malicious information
# PS uses .ps1 files to save and run PS cmds as a script
# By default policy is RESTRICTED not allowing scripts not created locally to run
# HENCE, we require specific permissions and validation prior to execution.

# List all of the Scopes and ExecutionPolicies on the system
Get-ExecutionPolicy -list                                             
# Get the current user's ExecutionPolicy
Get-ExecutionPolicy    
# Sets the ExecutionPolicy for the CurrentUser to Unrestricted                                               
Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser  

#3. PowerShell Profiles
# Convenient way to store PowerShell configuration information 
# as well as personalized aliases and functions to persistent use in every PowerShell session.
$Profile

#3.1 PowerShell Profile Paths
$PsHome         # Stores the installation directory for PowerShell
$Home           # Stores the current user’s home directory

# Display the profile values of Names, MemberType, and Paths.
$profile | Get-Member -Type NoteProperty 
# Display the same results but completed in case it was cut off '...'                       
$Profile | get-member -type noteproperty | ft -wrap 

# Narrowed results to display only Names            
$PROFILE | Get-Member -MemberType noteproperty | select name    
# ^^ all not case sensitive

##################################
#3.2 Creating A PowerShell Profile
# Create a $Profile for the CurrentUser. Force is used to ignore any errors.
New-Item -ItemType File -Path $profile -Force    
# Open your newly created $Profile, which is empty             
ISE $profile                                                  

# Test if inidvidual profiles were created
Test-Path -Path $profile.currentUsercurrentHost
Test-Path -Path $profile.currentUserAllHosts
Test-Path -Path $profile.AllUsersAllHosts
Test-Path -Path $profile.AllUserscurrentHost

#close the PowerShell window and you will be required to recreate the same PowerShell aliases.
New-Alias -Name DemUsers -Value Get-LocalUser

#################################################
# you can create functions  ***********
function Color-Console {
  $Host.ui.rawui.backgroundcolor = "black"
  $Host.ui.rawui.foregroundcolor = "green"
  $hosttime = (Get-ChildItem -Path $PSHOME\PowerShell.exe).CreationTime
  $hostversion="$($Host.Version.Major)`.$($Host.Version.Minor)"
  $Host.UI.RawUI.WindowTitle = "PowerShell $hostversion ($hosttime)"
  Clear-Host
}
Color-Console
##################################################
#you can start a transcript of all your commands that have been run
start-transcript
# Pipe to out-null so users don't see that commands are being recorded
start-transcript | out-null                       
# Starts to log commands into the c:\mywork.txt file
Start-Transcript C:\MyWork.txt                    
# Run get-service command and inputs that and the results into the transcript.
Get-Service                                       
# End the transcript
Stop-Transcript   
# View the contents of the created transcript                                
notepad c:\MyWork.txt                             

#4. Windows Remoting
# uses the Window Remote Management Protocol (WinRM) and 
# Web Services Management (WS-Man) to manage these communications.

# When the sessions have 2 different versions of PowerShell, the session will default to the lower version. 
# This can limit the cmdlets you have available.
# be aware of this

########################################
# Displays permissions
Get-PSSessionConfiguration                        
# query current network profiles
Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles'   
########################################
#4.1 PowerShell Remoting Security
# WinRM uses Kerberos for authentication by default.
# encrypts all comms with AES-256 symmetric keys
# Uses ports 5985 for HTTP by default or 5986 for HTTPS.
########################################
# Displays the WinRM configuration
winrm get winrm/config  
        # notice HTTPS Port 5986 and blank trusted hosts
# If you are outside of a Active Directory Domain then you have two options: 
# HTTPS or adding the host to the Trusted Hosts file
# Query trusted hosts
Get-Item WSMan:\localhost\client\TrustedHosts  
# Adding a single item to TrustedHosts
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "File-Server"
# Adding multiple items                              
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "File-Server,Domain-Controll,Workstation2" 
# Appends the Value instead of changing it
Set-Item WSMan:\localhost\Client\TrustedHosts -Value "workstation2" -Concatenate                    
####################################
####################################
#5. Remoting commands
# PSRemoting consists of two separate concepts: Temporary and Persistent Sessions.
# Concentrating on Temporary sessions
####################################
#5.1 Temporary Sessions

# Invoke-Command can be used to automate command execution across a domain 
# using both temporary and new-sessions.

# Creates 1-to-1 Temporary Session
Invoke-Command -ComputerName File-Server {Get-Service | where Status -eq "Running"} 
# Running a Temporary Session as a Job        
Invoke-Command -ComputerName File-Server,Domain-Controll,Workstation2 {Get-Service} -asjob  
# Displays the job's Results
Receive-Job 2                                                                               

# DEFENCE AND OFFFENCE
///////////////////////////////////
This is the script pane
update-help -force #updates Powershell Help files
verb-noun #PowerShell syntax
get-command #List all PS commands
get-verb #Lists all PowerShell verbs
get-command -noun process #Search for a specific command
get-help Get-Process -Full #List full help menu
get-help Get-Process -ShowWindow #Opens help in its own resizable and searchable windows
get-help Get-Process -examples #Shows only help file examples
get-help Get-Process -online #Opens the hlpe file on the web
get-process -name smss #lists on process
get-process -Com WinOpsStation -Na smss #Another way of listing one process
get-process get-process 
get-alias *get #List alaises that end with get
get-process | Get-Member | where MemberType -eq property #Lists PowerShell object properties
get-process | select name,id, path #Lists process names, ids, and where they run from
(get-process).Name #Lists a single column for get-proces
get-process | select name,id,path | sort -property id #sorts
get-process | select name,id,path | sort -property id | where id -LT "1000" #shows process less than 1000
get-process | select name,id,path | sort -property id | where {$_.id -LT "1000"} #2nd Where statement syntax
get-process svchost | select name,id,path #Lists all svchost processes
(get-process).count #Counts Processes
measure-object | gm #shows measure-0bject command where count is a property
start-process calc #Starts calculator process
get-process calc*
(get-process calculator).kill() #Kills caslulator process by invoking a kill method
Get-cimclass *BIOS*
Get-CimInstance Win32_BIOS
Get-WmiObject # (Depricated Command) 
Get-WmiObject Win32_BIOS
gwmi win32_useraccount
get-ciminstance win32_useraccount
get-cimclass *
Get-CimInstance –Namespace root\securitycenter2 –ClassName antispywareproduct
Get-CimInstance -ClassName Win32_LogicalDisk -Filter “DriveType=3” | gm
Get-ciminstance -Class Win32_LogicalDisk -Filter “DriveType=3”
PowerShell Functions 
====================
Function get-enum { 
    hostname
    date
    get-localuser | select name, enabled | ft
    get-process | select name, id, path | ft
    }
get-enum
Basic Looping
==============
# for (conditions){commands}
for ($i=1; $i -lt 10; $i++) {
    Write-Output "The loop number is $i"
    }

#while loop (conditions){commands} incriment at the end
$i = 10
while ($i -ge 0) {
Write-Output "The loop number is $i";
$i --
}

ForEach ($line in (get-process).name) {"Write-output The Process name is $line"}
get-help about_logical_operators

PowerShell Execution Policy
=========================
Get-ExecutionPolicy 
Set-ExecutionPolicy unRestricted -force
new-item -Name new_file.txt
Remove-Item .\new_file.txt -ErrorAction SilentlyContinue # supress errors
get-childitem -path c:\ -recurse -force # list files in directory recursively and show hidden files
Remove-Item .\new_file.txt -Verbose

ISE is different and has diff profiles
 Current user, Current Host $Home\[My ]Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1
 All users, Current Host    $PsHome\Microsoft.PowerShellISE_profile.ps1
 $Profile.CurrentUserCurrentHost    
To determione if a profile is applied
test-path $profile.AllUsersAllHosts #set background =black
test-path $Profile.CurrentUserCurrentHost   #set background =white
test-path $Profile.CurrentUserAllHosts            #set background =blue
test-path $Profile.AllUsersCurrentHost        #set background =red

Sample Profile 
Write-output "======================================================"
Write-output "The user $env:USERNAME is being monitoired on $env:COMPUTERNAME"
Get-date
Start-Transcript | out-null
Write-output "======================================================"
Function get-enum { 
    hostname
    date
    get-localuser | select name, enabled | ft
    get-process | select name, id, path | ft
    }
    
Hostname
PowerShell Remoting
===================
Must be on the Admin-Station
Interactive Session
enter-pssession file-server #Most Important
get-process
get-help about_remote -ShowWindow
Running a remote command
invoke-command -computername file-server { get-process }
Run remote command multiple machines
invoke-command -computername file-server, workstation2, Domain-controll { get-process }
invoke-command -computername file-server, workstation2, Domain-controll { get-process } -asjob
Receive-Job job4
Semi-Persistent Session
========================
$s1= New-PSSession -ComputerName file-server 
Invoke-Command -session $s1 {hostname}

//////////////////
#Getting a User's SID
 #PowerShell:
get-wmiobject win32_useraccount | select name,sid
Get-LocalUser | select Name,SID
 #Command Prompt:
wmic useraccount get name,sid 

#USERASSIST
 #CEBFF5CD: Executable File Execution
Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count"
 #F4E57C4B: Shortcut File Execution
Get-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\UserAssist\{F4E57C4B-2036-45F0-A9AB-443BCFE33D9F}\Count"

#BAM
#Every User on the System
Get-Item HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\*
#Single User on the System
Get-Item HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\<SID>

#RECYCLEBIN
#Find the Contents of the Recycle Bin
Get-Childitem 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select FullName
   
#PREFETCH
Get-Childitem -Path 'C:\Windows\Prefetch' -ErrorAction Continue | select -First 50
   
#JUMP LISTS
#Programs/Items that were recently used
Get-Childitem -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction silentlyContinue | select FullName, LastAccessTime
Get-Childitem -Recurse C:\Users\andy.dwyer\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction SilentlyContinue | select CreationTime,FullName |ft -wrap
Get-Childitem -Recurse C:\Users\andy.dwyer\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction SilentlyContinue | select LastAccessTime,FullName |ft -wrap
#or
Get-Childitem -Recurse $env:USERPROFILE\AppData\Roaming\Microsoft\Windows\Recent -ErrorAction SilentlyContinue | select LastAccessTime,FullName | ft -wrap

#RECENT FILES
Get-childItem 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt'
Get-childItem 'Registry::\HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.*'
#Converting a Single Value from Hex to Unicode
[System.Text.Encoding]::Unicode.GetString((gp "REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt")."1")
#Convert All Files
Get-Item "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" | select -Expand property | ForEach-Object {
    [System.Text.Encoding]::Default.GetString((Get-ItemProperty -Path "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt" -Name $_).$_)
}

#BROWSER ARTIFACTS
# Frequency
strings.exe 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\History' -accepteula

# Most Visited
strings.exe 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Top Sites'

# User Names
strings.exe  'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Login Data'
strings.exe  'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\Login Data' | findstr -i "https*"

#Find FQDNs in Sqlite Text files
$History = (Get-Content 'C:\users\andy.dwyer\AppData\Local\Google\Chrome\User Data\Default\History') -replace "[^a-zA-Z0-9\.\:\/]",""

$History | Select-String -Pattern "(https|http):\/\/[a-zA-Z_0-9]+\.\w+[\.]?\w+[\.]?\w+" -AllMatches|foreach {$_.Matches.Groups[0].Value}| ft

#AUDIT Policies
#View All Audit Options
auditpol /get /category:*
#View Subcategory
auditpol /get /category:"Object Access"
#Sets it
auditpol /set /subcategory:"File System"
#Clears It
auditpol /set /subcategory:"File System" /success:disable

#=====Command Prompt=====
#EVENT LOGS
#Show all logs
wevtutil el
#Get security log info
wevtutil gli security
#Get last 3 events from security log and view in human readable format.
wevtutil qe security /c:3 /f:text    

#Last 10 entries in System Log
Get-EventLog -LogName System -Newest 10
Get-EventLog -LogName System -Newest 10 | Format-Table -wrap
Get-EventLog -LogName System | Format-Table -wrap

#Search the event logs and show the entire message
Get-Eventlog -LogName Security | ft -wrap
#Search for a String
Get-Eventlog -LogName Security | ft -wrap | findstr /i $tR1nG
Get-Eventlog -LogName Security | ft -wrap | findstr /i "An attempt was made to access an object."

#Finding Log Type to Query
Get-WinEvent -Listlog *

#Checking If a User Logged on
Get-Winevent -FilterHashtable @{logname='Security';id='4624'} | ft -Wrap
Get-Winevent -FilterHashtable @{logname='Security';id='4624'} | ft -Wrap | findstr /i "generated"

#Checking Powershell Operational Logs
Get-WinEvent Microsoft-Windows-PowerShell/Operational |Where-Object {$_.Message -ilike "*Out-Default*"} | Format-List

Get-WinEvent Microsoft-Windows-PowerShell/Operational |Where-Object {$_.Message -ilike "*Pipeline ID = 4103"} | Format-List

/////////////////////////////////

Searching for Multiple Users/List of Users
Get-ADUser -Filter *

#Searching for a Single User
Get-ADUser andy.dwyer

#Searching for Multiple Users + Extended Properties
Get-AdUser -Filter * -Properties *
Get-ADUser andy.dwyer -Properties *

#Breaking Down -Filter and -Properties
Get-ADUser -Filter {Name -like '*joh*'}
Get-ADUser -Filter {Name -like '*admin*'}

#Filter is what you can use to apply your conditions in. 
Get-ADUser -Filter {Name -like '*odonnell'}

#Filtering for Different Fields, by Default you will get 10 fields : Example Description
Get-ADUser -Filter *

#Properties is what you can use to view the data.
Get-ADUser -Filter {Officephone -like '*'}
Get-ADUser -Filter {Officephone -like '*'} -Properties *

#Full output for Specific User
Get-ADUser -Filter {Name -like '*odonnell'} -Properties *

#This Filter succeeded, however, since you did not apply the 
#-Properties switch, it will not display the results
Get-ADUser -Filter {Description -like '*'}

#With the -Properties switch; However, this will provide you all the fields
Get-ADUser -Filter {Description -like '*'} -Properties * 

#Adding on the -Properties switch and specifying an additional field; we get 11 fields
Get-ADUser -Filter {Description -like '*'} -Properties Description

#Because Get-ADUser by default provides us with 10 fields, we will need to pipe our output to Select-Object to filter
#which fields we want/need
Get-ADUser -Filter {Description -like '*'} -Properties Description | Select-Object Name,SID,Description
Get-ADUser -Filter {Description -like '*'} -Properties Description | Select-Object Name,SID,Description | Format-List


#FIND Disabled Users
Get-ADUser -Filter {Enabled -eq "false"} -Properties name,enabled

#Enable User
Enable-ADAccount -Identity guest
#Set Password
Set-ADAccountPassword -Identity guest
#or
Set-AdAccountPassword -Identity guest -NewPassword (ConvertTo-SecureString -AsPlaintext -String "PassWord12345!!" -Force)
#Add to Domain Group
Add-ADGroupMember -Identity "Domain Admins" -members guest

#CREATE a New User
#Get sample of naming convention
Get-ADUser -Filter * | select distinguishedname,name

#Create User
New-ADUser -Name "Bad.Guy" -PasswordNotRequired 1 -path "OU=3RD PLT,OU=ACO,OU=3RDBN,OU=WARRIORS,DC=army,DC=warriors"

#Set Password
Set-ADAccountPassword -Identity "Bad.Guy"

# OR Create User & Set Password
New-ADUser -Name "Bad.Guy" -AccountPassword (ConvertTo-SecureString -AsPlaintext -String "PassWord12345!!" -Force) -path "OU=3RD PLT,OU=CCO,OU=3RDBN,OU=WARRIORS,DC=army,DC=warriors"

#Enable User
Enable-ADAccount -Identity "Bad.Guy"

#Add to Admin Group
Add-ADGroupMember -Identity "Domain Admins" -members "Bad.Guy" 

Remove-ADUser -Identity "Bad.Guy"
Remove-ADGroupMember -Identity "Domain Admins" -Members guest
Disable-AdAccount -Identity Guest

